/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/course.js":
/*!***********************!*\
  !*** ./src/course.js ***!
  \***********************/
/***/ (() => {

eval("const knownExtensions = {\n    \"hs\": \"Haskell\",\n    \"c\": \"C\",\n    \"cpp\": \"Cpp\",\n    \"py\": \"Python\"\n};\n\nconst errorString = {\n    1: \"Error: Such problem does not exist\",\n    2: \"Error: Testing programs in that language is not supported\",\n    3: \"Error: Something went wrong during testing\"\n};\n\nonload = async () => {\n    const uploadInput = document.querySelector(\"#upload-file-input\");\n    uploadInput.value = null;\n\n    const languageSelector = document.querySelector(\"#language-selector\");\n    languageSelector.value = \"\";\n\n    uploadInput.oninput = () => {\n        if (uploadInput.files.length != 1) { return; }\n\n        const filename = uploadInput.files[0].name;\n        const ext = filename.split('.').pop();\n        languageSelector.value = knownExtensions[ext] || \"\";\n    };\n\n    const resp = await fetch(\"/api\" + location.pathname);\n    const course = await resp.json();\n\n    const courseName = document.querySelector(\"#course-name\");\n    courseName.insertAdjacentHTML(\n        \"beforeend\",\n        `<h1>${course.name}</h1>`\n    );\n\n    const navpanel = document.querySelector(\"#problem-selector-navpanel\");\n    const description = document.querySelector(\"#problem-description\");\n\n    let currSelectedProblemId;\n    let lastSelectedProblem = 0;\n\n    selectProblem = i => {\n        if (!course.problems[i]) { return; }\n\n        currSelectedProblemId = course.problems[i].id;\n\n        navpanel.children[lastSelectedProblem].classList.remove(\"navbox-active\");\n        navpanel.children[i].classList.add(\"navbox-active\");\n\n        description.innerHTML = course.problems[i].description;\n        uploadInput.value = null;\n        languageSelector.value = \"\";\n\n        lastSelectedProblem = i;\n    };\n\n    for (let i = 0; i < course.problems.length; i++) {\n        navpanel.insertAdjacentHTML(\n            \"beforeend\",\n            `\n            <div class=\"navbox\">\n                <button onclick=\"selectProblem(${i})\">&numero;${i + 1}</button>\n            </div>\n            `\n        );\n    }\n\n    selectProblem(0);\n\n    const uploadResults = document.querySelector(\"#upload-results\");\n    const uploadLog = document.querySelector(\"#upload-log\");\n    const problemStatus = document.querySelector(\"#problem-status\");\n    const errorDescription = document.querySelector(\"#error-description\");\n    const closeButton = document.querySelector(\"#close-results\");\n\n    const clearUploadResults = () => {\n        uploadResults.style.display = \"none\";\n        uploadLog.replaceChildren();\n        errorDescription.replaceChildren();\n    };\n\n    onkeydown = e => {\n        if (e.key == \"Escape\") {\n            clearUploadResults();\n        }\n    };\n\n    closeButton.onclick = () => {\n        clearUploadResults();\n    };\n\n    const openText = text => {\n        const wnd = open();\n        wnd.document.write(text)\n        return wnd;\n    };\n\n    displayInput = data => {\n        const wnd = openText(data);\n        wnd.document.title = \"Failed Test Input\";\n    };\n\n    displayOutput = data => {\n        const wnd = openText(data);\n        wnd.document.title = \"Expected Output\";\n    };\n\n    const uploadButton = document.querySelector(\"#upload-solution\");\n    uploadButton.onclick = () => {\n        const ws = new WebSocket(`/api/submit/${currSelectedProblemId}`);\n\n        ws.onopen = async () => {\n            if (uploadInput.files.length != 1) { return; }\n            if (languageSelector.value === \"\") { return; }\n\n            const content = await uploadInput.files[0].text();\n            ws.send(JSON.stringify({\n                source: content,\n                lang: languageSelector.value\n            }));\n\n            uploadInput.value = null;\n            languageSelector.value = \"\";\n\n            problemStatus.innerHTML = \"<span>PROCESSING</span>\";\n            problemStatus.style.backgroundColor = \"yellow\";\n            uploadResults.style.display = \"\";\n\n            scroll(0, 0);\n        };\n\n        ws.onmessage = msg => {\n            const data = JSON.parse(msg.data);\n\n            if (data.ok) {\n                if (data.logs) {\n                    uploadLog.replaceChildren();\n                    data.logs.forEach(log => {\n                        uploadLog.insertAdjacentHTML(\n                            \"beforeend\",\n                            `<span>${log}</span>`\n                        );\n                    });\n                } else {\n                    problemStatus.innerHTML = \"<span>PASSED</span>\";\n                    problemStatus.style.backgroundColor = \"green\";\n                    closeButton.style.display = \"\";\n                }\n            } else {\n                problemStatus.innerHTML = \"<span>FAILED</span>\";\n                problemStatus.style.backgroundColor = \"red\";\n                closeButton.style.display = \"\";\n\n                if (errorString[data.err.errorCode]) {\n                    errorDescription.insertAdjacentHTML(\n                        \"beforeend\",\n                        `<span>${errorString[data.err.errorCode]}</span>`\n                    );\n                } else if (data.err.errorCode == 5 || data.err.errorCode == 6) {\n                    errorDescription.insertAdjacentHTML(\n                        \"beforeend\",\n                        `\n                        <a class=\"input\" onclick=\"displayInput('${data.err.errorData.input}')\">Failed Test Input</a>\n                        <a class=\"output\" onclick=\"displayOutput('${data.err.errorData.output}')\">Expected Output</a>\n                        `\n                    );\n                }\n            }\n        };\n    };\n}\n\n\n//# sourceURL=webpack://client/./src/course.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/course.js"]();
/******/ 	
/******/ })()
;